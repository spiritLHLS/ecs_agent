name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21'

    - name: Build
      run: go build -o ecsagent client.go

    - name: Check if release exists
      id: check_release
      run: |
        TAG_NAME="v0.0.1"  # Update this with your desired tag name
        RELEASE_ID=$(curl -s -X GET -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id')
        echo "::set-output name=release_id::$RELEASE_ID"
      continue-on-error: true

    - name: Delete existing release
      if: steps.check_release.outputs.release_id != 'null'
      run: |
        RELEASE_ID="${{ steps.check_release.outputs.release_id }}"
        curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
      continue-on-error: true

    - name: Create Release
      id: create_release
      if: steps.check_release.outputs.release_id == 'null'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v0.0.1
        release_name: Release 0.0.1
        body: |
          多机爬虫客户端
        draft: false
        prerelease: false

    - name: Get upload URL
      id: upload_url
      if: steps.check_release.outputs.release_id == 'null'
      run: |
        echo "::set-output name=upload_url::$(echo '${{ steps.create_release.outputs.data }}' | jq -r '.upload_url' | sed 's/{?name,label}//')"
      shell: bash

    - name: Upload Release Asset
      id: upload-release-asset
      if: steps.check_release.outputs.release_id == 'null'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.upload_url.outputs.upload_url }}
        asset_path: ./ecsagent
        asset_name: ecsagent
        asset_content_type: application/octet-stream
